
rtcTest0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000004c2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000148a  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac7  00000000  00000000  00001b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000944  00000000  00000000  00002635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000324  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000535  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c3f  00000000  00000000  000037d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00004414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  8e:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2cInit>:

#include <avr/io.h>
#include "i2c.h"

void i2cInit(void) {
	TWCR = _BV(TWEN);
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	TWBR = (F_CPU/F_SCL - 16) / 2;
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  a2:	08 95       	ret

000000a4 <i2cStart>:
}

uint8_t i2cStart(void) {
	TWCR = _BV(TWEN) | _BV(TWSTA) | _BV(TWINT);
  a4:	84 ea       	ldi	r24, 0xA4	; 164
  a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & _BV(TWINT)));
  aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ae:	87 ff       	sbrs	r24, 7
  b0:	fc cf       	rjmp	.-8      	; 0xaa <i2cStart+0x6>
	uint8_t status = TWSR & I2C_STATUS_MASK;
  b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  b6:	88 7f       	andi	r24, 0xF8	; 248
	if (status == I2C_START || status == I2C_START_REPEATED) {
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	11 f0       	breq	.+4      	; 0xc0 <i2cStart+0x1c>
  bc:	80 31       	cpi	r24, 0x10	; 16
  be:	09 f4       	brne	.+2      	; 0xc2 <i2cStart+0x1e>
		return I2C_OK;
  c0:	80 e0       	ldi	r24, 0x00	; 0
		} else {
		return status;
	}
}
  c2:	08 95       	ret

000000c4 <i2cStop>:

void i2cStop(void) {
	TWCR = _BV(TWEN) | _BV(TWSTO) | _BV(TWINT);
  c4:	84 e9       	ldi	r24, 0x94	; 148
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (TWCR & _BV(TWSTO));
  ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ce:	84 fd       	sbrc	r24, 4
  d0:	fc cf       	rjmp	.-8      	; 0xca <i2cStop+0x6>
}
  d2:	08 95       	ret

000000d4 <i2cSend>:

void i2cSend(uint8_t data) {
	TWDR = data;
  d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = _BV(TWEN) | _BV(TWINT);
  d8:	84 e8       	ldi	r24, 0x84	; 132
  da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & _BV(TWINT)));
  de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e2:	87 ff       	sbrs	r24, 7
  e4:	fc cf       	rjmp	.-8      	; 0xde <i2cSend+0xa>
}
  e6:	08 95       	ret

000000e8 <i2cSendAddress>:

uint8_t i2cSendAddress(uint8_t address) {
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
	i2cSend(address);
  ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSend>
	uint8_t status = TWSR & I2C_STATUS_MASK;
  f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f4:	98 7f       	andi	r25, 0xF8	; 248
	if (address & 0b00000001) {
  f6:	8c 2f       	mov	r24, r28
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	c0 ff       	sbrs	r28, 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <i2cSendAddress+0x1e>
		return (status == I2C_ADDR_READ_ACK) ? I2C_OK : status;
  fe:	90 34       	cpi	r25, 0x40	; 64
 100:	21 f4       	brne	.+8      	; 0x10a <i2cSendAddress+0x22>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	03 c0       	rjmp	.+6      	; 0x10c <i2cSendAddress+0x24>
		} else {
		return (status == I2C_ADDR_WRITE_ACK) ? I2C_OK : status;
 106:	98 31       	cpi	r25, 0x18	; 24
 108:	09 f0       	breq	.+2      	; 0x10c <i2cSendAddress+0x24>
 10a:	89 2f       	mov	r24, r25
	}
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <i2cSendData>:

uint8_t i2cSendData(uint8_t data) {
	i2cSend(data);
 110:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSend>
	uint8_t status = TWSR & I2C_STATUS_MASK;
 114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 118:	88 7f       	andi	r24, 0xF8	; 248
	return (status == I2C_DATA_SENT_ACK) ? I2C_OK : status;
 11a:	88 32       	cpi	r24, 0x28	; 40
 11c:	09 f4       	brne	.+2      	; 0x120 <i2cSendData+0x10>
 11e:	80 e0       	ldi	r24, 0x00	; 0
}
 120:	08 95       	ret

00000122 <i2cReceive>:

uint8_t i2cReceive(uint8_t last, uint8_t * data){
 122:	98 2f       	mov	r25, r24
	TWCR = last ? _BV(TWEN) | _BV(TWINT) : _BV(TWEN) | _BV(TWINT) | _BV(TWEA);
 124:	81 11       	cpse	r24, r1
 126:	02 c0       	rjmp	.+4      	; 0x12c <i2cReceive+0xa>
 128:	84 ec       	ldi	r24, 0xC4	; 196
 12a:	01 c0       	rjmp	.+2      	; 0x12e <i2cReceive+0xc>
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));
 132:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 136:	87 ff       	sbrs	r24, 7
 138:	fc cf       	rjmp	.-8      	; 0x132 <i2cReceive+0x10>
	*data = TWDR;
 13a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 13e:	fb 01       	movw	r30, r22
 140:	80 83       	st	Z, r24
	uint8_t status = TWSR & I2C_STATUS_MASK;
 142:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 146:	88 7f       	andi	r24, 0xF8	; 248
	if (last) {
 148:	99 23       	and	r25, r25
 14a:	19 f0       	breq	.+6      	; 0x152 <i2cReceive+0x30>
		return (status == I2C_DATA_RECEIVED_NACK) ? I2C_OK : status;
 14c:	88 35       	cpi	r24, 0x58	; 88
 14e:	21 f4       	brne	.+8      	; 0x158 <i2cReceive+0x36>
 150:	02 c0       	rjmp	.+4      	; 0x156 <i2cReceive+0x34>
		} else {
		return (status == I2C_DATA_RECEIVED_ACK) ? I2C_OK : status;
 152:	80 35       	cpi	r24, 0x50	; 80
 154:	09 f4       	brne	.+2      	; 0x158 <i2cReceive+0x36>
	TWCR = last ? _BV(TWEN) | _BV(TWINT) : _BV(TWEN) | _BV(TWINT) | _BV(TWEA);
	while (!(TWCR & (1<<TWINT)));
	*data = TWDR;
	uint8_t status = TWSR & I2C_STATUS_MASK;
	if (last) {
		return (status == I2C_DATA_RECEIVED_NACK) ? I2C_OK : status;
 156:	80 e0       	ldi	r24, 0x00	; 0
		} else {
		return (status == I2C_DATA_RECEIVED_ACK) ? I2C_OK : status;
	}
 158:	08 95       	ret

0000015a <main>:
#include "rtc.h"
#include "i2c.h"
#include "USART.h"

int main(void)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	29 97       	sbiw	r28, 0x09	; 9
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
	initUSART();
 16e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <initUSART>
	printString("test rtc\r\n");
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 11 02 	call	0x422	; 0x422 <printString>
	printByte(rtcInit());
 17a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <rtcInit>
 17e:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
	uint8_t data0;
	rtcReadRAM(&data0,1,0);
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	ce 01       	movw	r24, r28
 188:	09 96       	adiw	r24, 0x09	; 9
 18a:	0e 94 20 01 	call	0x240	; 0x240 <rtcReadRAM>
	printBinaryByte(data0);
 18e:	89 85       	ldd	r24, Y+9	; 0x09
 190:	0e 94 35 02 	call	0x46a	; 0x46a <printBinaryByte>
	printString("\r\n");
 194:	88 e0       	ldi	r24, 0x08	; 8
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 11 02 	call	0x422	; 0x422 <printString>
    /* Replace with your application code */
    while (1) 
    {
		receiveByte();
 19c:	0e 94 0a 02 	call	0x414	; 0x414 <receiveByte>
		DateTime dt = rtcGetDateTime();
 1a0:	0e 94 98 01 	call	0x330	; 0x330 <rtcGetDateTime>
 1a4:	29 83       	std	Y+1, r18	; 0x01
 1a6:	3a 83       	std	Y+2, r19	; 0x02
 1a8:	4b 83       	std	Y+3, r20	; 0x03
 1aa:	7e 83       	std	Y+6, r23	; 0x06
 1ac:	8f 83       	std	Y+7, r24	; 0x07
 1ae:	98 87       	std	Y+8, r25	; 0x08
		
		printByte(dt.hours);
 1b0:	85 2f       	mov	r24, r21
 1b2:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
		printString(":");
 1b6:	8b e0       	ldi	r24, 0x0B	; 11
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 11 02 	call	0x422	; 0x422 <printString>
		printByte(dt.minutes);
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
		printString(":");
 1c4:	8b e0       	ldi	r24, 0x0B	; 11
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 11 02 	call	0x422	; 0x422 <printString>
		printByte(dt.seconds);
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
		printString(".");
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 11 02 	call	0x422	; 0x422 <printString>
		printByte(dt.h_seconds);
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
		printString(" ");
 1e0:	8f e0       	ldi	r24, 0x0F	; 15
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 11 02 	call	0x422	; 0x422 <printString>
		printByte(dt.day);
 1e8:	8e 81       	ldd	r24, Y+6	; 0x06
 1ea:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
		printString("-");
 1ee:	81 e1       	ldi	r24, 0x11	; 17
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 11 02 	call	0x422	; 0x422 <printString>
		printByte(dt.month);
 1f6:	8f 81       	ldd	r24, Y+7	; 0x07
 1f8:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
		printString("-");
 1fc:	81 e1       	ldi	r24, 0x11	; 17
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 11 02 	call	0x422	; 0x422 <printString>
		printByte(dt.year);
 204:	88 85       	ldd	r24, Y+8	; 0x08
 206:	0e 94 24 02 	call	0x448	; 0x448 <printByte>
 20a:	c4 cf       	rjmp	.-120    	; 0x194 <main+0x3a>

0000020c <rtcWriteRAM0>:
	}
	i2cStop();
	return 0;
}

uint8_t rtcWriteRAM0(uint8_t data, uint8_t addr) {
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	d8 2f       	mov	r29, r24
 214:	16 2f       	mov	r17, r22
	i2cStart();
 216:	0e 94 52 00 	call	0xa4	; 0xa4 <i2cStart>
	uint8_t status = i2cSendAddress(RTC_ADDR_W);
 21a:	80 ea       	ldi	r24, 0xA0	; 160
 21c:	0e 94 74 00 	call	0xe8	; 0xe8 <i2cSendAddress>
 220:	c8 2f       	mov	r28, r24
	if(status != I2C_OK) return status;
 222:	81 11       	cpse	r24, r1
 224:	08 c0       	rjmp	.+16     	; 0x236 <rtcWriteRAM0+0x2a>
	i2cSendData(addr);
 226:	81 2f       	mov	r24, r17
 228:	0e 94 88 00 	call	0x110	; 0x110 <i2cSendData>
	i2cSendData(data);
 22c:	8d 2f       	mov	r24, r29
 22e:	0e 94 88 00 	call	0x110	; 0x110 <i2cSendData>
	i2cStop();
 232:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStop>
	return 0;
}
 236:	8c 2f       	mov	r24, r28
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <rtcReadRAM>:

uint8_t rtcReadRAM(uint8_t *data, uint8_t n, uint8_t addr) {
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	7c 01       	movw	r14, r24
 252:	06 2f       	mov	r16, r22
 254:	c4 2f       	mov	r28, r20
	i2cStart();
 256:	0e 94 52 00 	call	0xa4	; 0xa4 <i2cStart>
	uint8_t status = i2cSendAddress(RTC_ADDR_W);
 25a:	80 ea       	ldi	r24, 0xA0	; 160
 25c:	0e 94 74 00 	call	0xe8	; 0xe8 <i2cSendAddress>
	if(status != I2C_OK) return status;
 260:	81 11       	cpse	r24, r1
 262:	23 c0       	rjmp	.+70     	; 0x2aa <rtcReadRAM+0x6a>
	i2cSendData(addr);
 264:	8c 2f       	mov	r24, r28
 266:	0e 94 88 00 	call	0x110	; 0x110 <i2cSendData>
	i2cStart();
 26a:	0e 94 52 00 	call	0xa4	; 0xa4 <i2cStart>
	status = i2cSendAddress(RTC_ADDR_R);
 26e:	81 ea       	ldi	r24, 0xA1	; 161
 270:	0e 94 74 00 	call	0xe8	; 0xe8 <i2cSendAddress>
	if(status != I2C_OK) return status;
 274:	81 11       	cpse	r24, r1
 276:	19 c0       	rjmp	.+50     	; 0x2aa <rtcReadRAM+0x6a>
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < n; i++) {
		i2cReceive((i == (n - 1)), data);
 27e:	68 01       	movw	r12, r16
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	c8 1a       	sub	r12, r24
 284:	d1 08       	sbc	r13, r1
 286:	b7 01       	movw	r22, r14
 288:	6c 0f       	add	r22, r28
 28a:	7d 1f       	adc	r23, r29
	if(status != I2C_OK) return status;
	i2cSendData(addr);
	i2cStart();
	status = i2cSendAddress(RTC_ADDR_R);
	if(status != I2C_OK) return status;
	for(uint8_t i = 0; i < n; i++) {
 28c:	c0 17       	cp	r28, r16
 28e:	d1 07       	cpc	r29, r17
 290:	49 f0       	breq	.+18     	; 0x2a4 <rtcReadRAM+0x64>
		i2cReceive((i == (n - 1)), data);
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	cc 16       	cp	r12, r28
 296:	dd 06       	cpc	r13, r29
 298:	09 f0       	breq	.+2      	; 0x29c <rtcReadRAM+0x5c>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 91 00 	call	0x122	; 0x122 <i2cReceive>
 2a0:	21 96       	adiw	r28, 0x01	; 1
 2a2:	f1 cf       	rjmp	.-30     	; 0x286 <rtcReadRAM+0x46>
		data++;
	}
	i2cStop();
 2a4:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStop>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	08 95       	ret

000002bc <rtcInit>:
 */ 
#include <avr/io.h>
#include "i2c.h"
#include "rtc.h"

uint8_t rtcInit(void) {
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	1f 92       	push	r1
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	i2cInit();
 2c8:	0e 94 4b 00 	call	0x96	; 0x96 <i2cInit>
	uint8_t err;
	uint8_t data;
	if((err=rtcReadRAM(&data, 1, 0))!=0) {
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	0e 94 20 01 	call	0x240	; 0x240 <rtcReadRAM>
 2d8:	88 23       	and	r24, r24
 2da:	21 f0       	breq	.+8      	; 0x2e4 <rtcInit+0x28>
		if(err==I2C_ADDR_WRITE_NACK)
 2dc:	80 32       	cpi	r24, 0x20	; 32
 2de:	81 f0       	breq	.+32     	; 0x300 <rtcInit+0x44>
 2e0:	18 2f       	mov	r17, r24
 2e2:	11 c0       	rjmp	.+34     	; 0x306 <rtcInit+0x4a>
			return 255;
		else return err;
	}
	if(data!=0b00000011){
 2e4:	19 81       	ldd	r17, Y+1	; 0x01
 2e6:	13 30       	cpi	r17, 0x03	; 3
 2e8:	69 f0       	breq	.+26     	; 0x304 <rtcInit+0x48>
		if(data==0){
			rtcWriteRAM0(0b00000011,0);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	83 e0       	ldi	r24, 0x03	; 3
		if(err==I2C_ADDR_WRITE_NACK)
			return 255;
		else return err;
	}
	if(data!=0b00000011){
		if(data==0){
 2ee:	11 11       	cpse	r17, r1
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <rtcInit+0x3c>
			rtcWriteRAM0(0b00000011,0);
 2f2:	0e 94 06 01 	call	0x20c	; 0x20c <rtcWriteRAM0>
			return 0;
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <rtcInit+0x4a>
		} else {
			rtcWriteRAM0(0b00000011,0);
 2f8:	0e 94 06 01 	call	0x20c	; 0x20c <rtcWriteRAM0>
			return 2;
 2fc:	12 e0       	ldi	r17, 0x02	; 2
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <rtcInit+0x4a>
	i2cInit();
	uint8_t err;
	uint8_t data;
	if((err=rtcReadRAM(&data, 1, 0))!=0) {
		if(err==I2C_ADDR_WRITE_NACK)
			return 255;
 300:	1f ef       	ldi	r17, 0xFF	; 255
 302:	01 c0       	rjmp	.+2      	; 0x306 <rtcInit+0x4a>
		} else {
			rtcWriteRAM0(0b00000011,0);
			return 2;
		}
	}
	return 1;
 304:	11 e0       	ldi	r17, 0x01	; 1
}
 306:	81 2f       	mov	r24, r17
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	08 95       	ret

00000312 <bcdToDec>:
	i2cStop();
	return 0;
}

uint8_t bcdToDec(uint8_t bcd) {
	return (((bcd >> 4) * 10) + (bcd && 0x0F));
 312:	98 2f       	mov	r25, r24
 314:	92 95       	swap	r25
 316:	9f 70       	andi	r25, 0x0F	; 15
 318:	99 0f       	add	r25, r25
 31a:	29 2f       	mov	r18, r25
 31c:	22 0f       	add	r18, r18
 31e:	22 0f       	add	r18, r18
 320:	92 0f       	add	r25, r18
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	81 11       	cpse	r24, r1
 326:	01 c0       	rjmp	.+2      	; 0x32a <bcdToDec+0x18>
 328:	20 e0       	ldi	r18, 0x00	; 0
}
 32a:	89 2f       	mov	r24, r25
 32c:	82 0f       	add	r24, r18
 32e:	08 95       	ret

00000330 <rtcGetDateTime>:

DateTime rtcGetDateTime(void) {
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	2f 97       	sbiw	r28, 0x0f	; 15
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[7];
	rtcReadRAM(data,7,1);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	ce 01       	movw	r24, r28
 358:	09 96       	adiw	r24, 0x09	; 9
 35a:	0e 94 20 01 	call	0x240	; 0x240 <rtcReadRAM>
	DateTime datetime;
	datetime.hours = bcdToDec(data[3] && 0b00111111);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	9c 85       	ldd	r25, Y+12	; 0x0c
 362:	91 11       	cpse	r25, r1
 364:	01 c0       	rjmp	.+2      	; 0x368 <rtcGetDateTime+0x38>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 89 01 	call	0x312	; 0x312 <bcdToDec>
 36c:	e8 2e       	mov	r14, r24
	datetime.minutes = bcdToDec(data[2]);
 36e:	8b 85       	ldd	r24, Y+11	; 0x0b
 370:	0e 94 89 01 	call	0x312	; 0x312 <bcdToDec>
 374:	d8 2e       	mov	r13, r24
	datetime.seconds = bcdToDec(data[1]);
 376:	8a 85       	ldd	r24, Y+10	; 0x0a
 378:	0e 94 89 01 	call	0x312	; 0x312 <bcdToDec>
 37c:	c8 2e       	mov	r12, r24
	datetime.h_seconds = bcdToDec(data[0]);
 37e:	89 85       	ldd	r24, Y+9	; 0x09
 380:	0e 94 89 01 	call	0x312	; 0x312 <bcdToDec>
 384:	b8 2e       	mov	r11, r24
	datetime.day = bcdToDec(data[4] >> 6);
 386:	1d 85       	ldd	r17, Y+13	; 0x0d
 388:	81 2f       	mov	r24, r17
 38a:	82 95       	swap	r24
 38c:	86 95       	lsr	r24
 38e:	86 95       	lsr	r24
 390:	83 70       	andi	r24, 0x03	; 3
 392:	0e 94 89 01 	call	0x312	; 0x312 <bcdToDec>
 396:	f8 2e       	mov	r15, r24
	datetime.month = bcdToDec(data[5] && 0b00011111);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	9e 85       	ldd	r25, Y+14	; 0x0e
 39c:	91 11       	cpse	r25, r1
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <rtcGetDateTime+0x72>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 89 01 	call	0x312	; 0x312 <bcdToDec>
 3a6:	08 2f       	mov	r16, r24
	datetime.year = bcdToDec(data[4] && 0b00111111);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	11 11       	cpse	r17, r1
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <rtcGetDateTime+0x80>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 89 01 	call	0x312	; 0x312 <bcdToDec>
 3b4:	98 2f       	mov	r25, r24
	datetime.dayOfWeek = bcdToDec((data[5] && 0b11100000) >> 5);
	return datetime;
 3b6:	2b 2d       	mov	r18, r11
 3b8:	3c 2d       	mov	r19, r12
 3ba:	4d 2d       	mov	r20, r13
 3bc:	5e 2d       	mov	r21, r14
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	7f 2d       	mov	r23, r15
 3c2:	80 2f       	mov	r24, r16
 3c4:	2f 96       	adiw	r28, 0x0f	; 15
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	df 90       	pop	r13
 3de:	cf 90       	pop	r12
 3e0:	bf 90       	pop	r11
 3e2:	08 95       	ret

000003e4 <initUSART>:
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 3e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3e8:	83 e3       	ldi	r24, 0x33	; 51
 3ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3ee:	e0 ec       	ldi	r30, 0xC0	; 192
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	8d 7f       	andi	r24, 0xFD	; 253
 3f6:	80 83       	st	Z, r24
 3f8:	88 e1       	ldi	r24, 0x18	; 24
 3fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 404:	08 95       	ret

00000406 <transmitByte>:
 406:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 40a:	95 ff       	sbrs	r25, 5
 40c:	fc cf       	rjmp	.-8      	; 0x406 <transmitByte>
 40e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 412:	08 95       	ret

00000414 <receiveByte>:
 414:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 418:	87 ff       	sbrs	r24, 7
 41a:	fc cf       	rjmp	.-8      	; 0x414 <receiveByte>
 41c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 420:	08 95       	ret

00000422 <printString>:
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	8c 01       	movw	r16, r24
 42a:	c0 e0       	ldi	r28, 0x00	; 0
 42c:	f8 01       	movw	r30, r16
 42e:	ec 0f       	add	r30, r28
 430:	f1 1d       	adc	r31, r1
 432:	80 81       	ld	r24, Z
 434:	88 23       	and	r24, r24
 436:	21 f0       	breq	.+8      	; 0x440 <printString+0x1e>
 438:	0e 94 03 02 	call	0x406	; 0x406 <transmitByte>
 43c:	cf 5f       	subi	r28, 0xFF	; 255
 43e:	f6 cf       	rjmp	.-20     	; 0x42c <printString+0xa>
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	08 95       	ret

00000448 <printByte>:
 448:	cf 93       	push	r28
 44a:	2a e0       	ldi	r18, 0x0A	; 10
 44c:	62 2f       	mov	r22, r18
 44e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
 452:	c9 2f       	mov	r28, r25
 454:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
 458:	80 e3       	ldi	r24, 0x30	; 48
 45a:	89 0f       	add	r24, r25
 45c:	0e 94 03 02 	call	0x406	; 0x406 <transmitByte>
 460:	80 e3       	ldi	r24, 0x30	; 48
 462:	8c 0f       	add	r24, r28
 464:	cf 91       	pop	r28
 466:	0c 94 03 02 	jmp	0x406	; 0x406 <transmitByte>

0000046a <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	1f 92       	push	r1
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 478:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	01 2e       	mov	r0, r17
 480:	02 c0       	rjmp	.+4      	; 0x486 <printBinaryByte+0x1c>
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <printBinaryByte+0x18>
 48a:	80 ff       	sbrs	r24, 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <printBinaryByte+0x28>
      transmitByte('1');
 48e:	81 e3       	ldi	r24, 0x31	; 49
 490:	01 c0       	rjmp	.+2      	; 0x494 <printBinaryByte+0x2a>
    else
      transmitByte('0');
 492:	80 e3       	ldi	r24, 0x30	; 48
 494:	0e 94 03 02 	call	0x406	; 0x406 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 498:	11 50       	subi	r17, 0x01	; 1
 49a:	78 f7       	brcc	.-34     	; 0x47a <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 49c:	0f 90       	pop	r0
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	08 95       	ret

000004a6 <__udivmodqi4>:
 4a6:	99 1b       	sub	r25, r25
 4a8:	79 e0       	ldi	r23, 0x09	; 9
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__udivmodqi4_ep>

000004ac <__udivmodqi4_loop>:
 4ac:	99 1f       	adc	r25, r25
 4ae:	96 17       	cp	r25, r22
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__udivmodqi4_ep>
 4b2:	96 1b       	sub	r25, r22

000004b4 <__udivmodqi4_ep>:
 4b4:	88 1f       	adc	r24, r24
 4b6:	7a 95       	dec	r23
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__udivmodqi4_loop>
 4ba:	80 95       	com	r24
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
