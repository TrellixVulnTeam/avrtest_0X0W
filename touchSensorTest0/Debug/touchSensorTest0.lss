
touchSensorTest0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011e  0080011e  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de2  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000607  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000690  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
#include <avr/interrupt.h>
#include "USART.h"

volatile uint16_t chargeCycleCount;

ISR(PCINT2_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	chargeCycleCount++;                                   /* zliczanie cykli */
  b4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
  b8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
  c2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>

	DDRD |= (1 << DDD7);                     /* tryb wyjœcia */
  c6:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <__vector_5+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <__vector_5+0x2a>
	_delay_us(1);                                    /* opóŸnienie ³adowania */

	DDRD &= ~(1 << DDD7);                    /* tryb wejœcia */
  d0:	57 98       	cbi	0x0a, 7	; 10
	PCIFR |= (1 << PCIF2);            /* wyczyœæ bit przerwania zmiany stanu */
  d2:	da 9a       	sbi	0x1b, 2	; 27
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:

int main(void)
{
    initUSART();
  e2:	0e 94 a0 00 	call	0x140	; 0x140 <initUSART>
	printString("==[Sensor pojemnoœciowy]==\r\n");
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 b9 00 	call	0x172	; 0x172 <printString>

	MCUCR |= _BV(PUD);
  ee:	85 b7       	in	r24, 0x35	; 53
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	85 bf       	out	0x35, r24	; 53
	PORTD |= _BV(PORTD7);
  f4:	5f 9a       	sbi	0x0b, 7	; 11
	PCICR |= _BV(PCIE2);
  f6:	e8 e6       	ldi	r30, 0x68	; 104
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	80 83       	st	Z, r24
	PCMSK2 |= _BV(PORTD7);
 100:	ed e6       	ldi	r30, 0x6D	; 109
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
    while (1) 
    {
		chargeCycleCount = 0;                            /* zerowanie licznika */
 10a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x1>
 10e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
		DDRD |= (1 << DDD7);  /* zaczynamy z na³adowanym kond. */
 112:	57 9a       	sbi	0x0a, 7	; 10
		sei();                                 /* w³¹cz przerwania i zliczanie */
 114:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x3a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x44>
 126:	00 00       	nop
		_delay_ms(50);
		cli();                                                       /* gotowe */
 128:	f8 94       	cli
		printWord(chargeCycleCount);                             /* do analizy */
 12a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 12e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 132:	0e 94 cf 00 	call	0x19e	; 0x19e <printWord>
		printString("\r\n");
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 b9 00 	call	0x172	; 0x172 <printString>
 13e:	e5 cf       	rjmp	.-54     	; 0x10a <main+0x28>

00000140 <initUSART>:
void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}
 140:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	80 83       	st	Z, r24
 154:	88 e1       	ldi	r24, 0x18	; 24
 156:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 160:	08 95       	ret

00000162 <transmitByte>:
 162:	e0 ec       	ldi	r30, 0xC0	; 192
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	90 81       	ld	r25, Z
 168:	95 ff       	sbrs	r25, 5
 16a:	fd cf       	rjmp	.-6      	; 0x166 <transmitByte+0x4>
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 170:	08 95       	ret

00000172 <printString>:
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	59 f0       	breq	.+22     	; 0x196 <printString+0x24>
 180:	8f 01       	movw	r16, r30
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	0e 94 b1 00 	call	0x162	; 0x162 <transmitByte>
 188:	cf 5f       	subi	r28, 0xFF	; 255
 18a:	f8 01       	movw	r30, r16
 18c:	ec 0f       	add	r30, r28
 18e:	f1 1d       	adc	r31, r1
 190:	80 81       	ld	r24, Z
 192:	81 11       	cpse	r24, r1
 194:	f7 cf       	rjmp	.-18     	; 0x184 <printString+0x12>
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <printWord>:

void printWord(uint16_t word) {
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 1a8:	9c 01       	movw	r18, r24
 1aa:	32 95       	swap	r19
 1ac:	22 95       	swap	r18
 1ae:	2f 70       	andi	r18, 0x0F	; 15
 1b0:	23 27       	eor	r18, r19
 1b2:	3f 70       	andi	r19, 0x0F	; 15
 1b4:	23 27       	eor	r18, r19
 1b6:	a7 e4       	ldi	r26, 0x47	; 71
 1b8:	b3 e0       	ldi	r27, 0x03	; 3
 1ba:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	80 5d       	subi	r24, 0xD0	; 208
 1cc:	0e 94 b1 00 	call	0x162	; 0x162 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 1d0:	98 01       	movw	r18, r16
 1d2:	36 95       	lsr	r19
 1d4:	27 95       	ror	r18
 1d6:	36 95       	lsr	r19
 1d8:	27 95       	ror	r18
 1da:	36 95       	lsr	r19
 1dc:	27 95       	ror	r18
 1de:	a5 ec       	ldi	r26, 0xC5	; 197
 1e0:	b0 e2       	ldi	r27, 0x20	; 32
 1e2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 1e6:	ac 01       	movw	r20, r24
 1e8:	52 95       	swap	r21
 1ea:	42 95       	swap	r20
 1ec:	4f 70       	andi	r20, 0x0F	; 15
 1ee:	45 27       	eor	r20, r21
 1f0:	5f 70       	andi	r21, 0x0F	; 15
 1f2:	45 27       	eor	r20, r21
 1f4:	9a 01       	movw	r18, r20
 1f6:	ad ec       	ldi	r26, 0xCD	; 205
 1f8:	bc ec       	ldi	r27, 0xCC	; 204
 1fa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	96 95       	lsr	r25
 208:	87 95       	ror	r24
 20a:	9c 01       	movw	r18, r24
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	9a 01       	movw	r18, r20
 222:	28 1b       	sub	r18, r24
 224:	39 0b       	sbc	r19, r25
 226:	c9 01       	movw	r24, r18
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	0e 94 b1 00 	call	0x162	; 0x162 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 22e:	98 01       	movw	r18, r16
 230:	36 95       	lsr	r19
 232:	27 95       	ror	r18
 234:	36 95       	lsr	r19
 236:	27 95       	ror	r18
 238:	ab e7       	ldi	r26, 0x7B	; 123
 23a:	b4 e1       	ldi	r27, 0x14	; 20
 23c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 240:	ac 01       	movw	r20, r24
 242:	56 95       	lsr	r21
 244:	47 95       	ror	r20
 246:	9a 01       	movw	r18, r20
 248:	ad ec       	ldi	r26, 0xCD	; 205
 24a:	bc ec       	ldi	r27, 0xCC	; 204
 24c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 250:	96 95       	lsr	r25
 252:	87 95       	ror	r24
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	9c 01       	movw	r18, r24
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	9a 01       	movw	r18, r20
 274:	28 1b       	sub	r18, r24
 276:	39 0b       	sbc	r19, r25
 278:	c9 01       	movw	r24, r18
 27a:	80 5d       	subi	r24, 0xD0	; 208
 27c:	0e 94 b1 00 	call	0x162	; 0x162 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 280:	98 01       	movw	r18, r16
 282:	ad ec       	ldi	r26, 0xCD	; 205
 284:	bc ec       	ldi	r27, 0xCC	; 204
 286:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 28a:	ec 01       	movw	r28, r24
 28c:	d6 95       	lsr	r29
 28e:	c7 95       	ror	r28
 290:	d6 95       	lsr	r29
 292:	c7 95       	ror	r28
 294:	d6 95       	lsr	r29
 296:	c7 95       	ror	r28
 298:	9e 01       	movw	r18, r28
 29a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__umulhisi3>
 29e:	96 95       	lsr	r25
 2a0:	87 95       	ror	r24
 2a2:	96 95       	lsr	r25
 2a4:	87 95       	ror	r24
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	9c 01       	movw	r18, r24
 2ac:	22 0f       	add	r18, r18
 2ae:	33 1f       	adc	r19, r19
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	82 0f       	add	r24, r18
 2be:	93 1f       	adc	r25, r19
 2c0:	9e 01       	movw	r18, r28
 2c2:	28 1b       	sub	r18, r24
 2c4:	39 0b       	sbc	r19, r25
 2c6:	c9 01       	movw	r24, r18
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	0e 94 b1 00 	call	0x162	; 0x162 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 2ce:	ce 01       	movw	r24, r28
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	cc 0f       	add	r28, r28
 2d6:	dd 1f       	adc	r29, r29
 2d8:	cc 0f       	add	r28, r28
 2da:	dd 1f       	adc	r29, r29
 2dc:	cc 0f       	add	r28, r28
 2de:	dd 1f       	adc	r29, r29
 2e0:	c8 0f       	add	r28, r24
 2e2:	d9 1f       	adc	r29, r25
 2e4:	c8 01       	movw	r24, r16
 2e6:	8c 1b       	sub	r24, r28
 2e8:	9d 0b       	sbc	r25, r29
 2ea:	80 5d       	subi	r24, 0xD0	; 208
 2ec:	0e 94 b1 00 	call	0x162	; 0x162 <transmitByte>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <__umulhisi3>:
 2fa:	a2 9f       	mul	r26, r18
 2fc:	b0 01       	movw	r22, r0
 2fe:	b3 9f       	mul	r27, r19
 300:	c0 01       	movw	r24, r0
 302:	a3 9f       	mul	r26, r19
 304:	70 0d       	add	r23, r0
 306:	81 1d       	adc	r24, r1
 308:	11 24       	eor	r1, r1
 30a:	91 1d       	adc	r25, r1
 30c:	b2 9f       	mul	r27, r18
 30e:	70 0d       	add	r23, r0
 310:	81 1d       	adc	r24, r1
 312:	11 24       	eor	r1, r1
 314:	91 1d       	adc	r25, r1
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
