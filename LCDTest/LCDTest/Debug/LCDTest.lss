
LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000002f8  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011c  0080011c  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb7  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084f  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058a  00000000  00000000  00001c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d4  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 44 01 	call	0x288	; 0x288 <main>
  9e:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdWrite>:

static uint8_t switchedTo4BitMode;
static uint8_t checkBusyFlag;

void lcdWrite(uint8_t data, uint8_t rs, uint8_t checkBusyFlag) {
	if (rs) LCD_RS_HIGH; else LCD_RS_LOW;
  a6:	66 23       	and	r22, r22
  a8:	11 f0       	breq	.+4      	; 0xae <lcdWrite+0x8>
  aa:	2e 9a       	sbi	0x05, 6	; 5
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <lcdWrite+0xa>
  ae:	2e 98       	cbi	0x05, 6	; 5
	#ifdef BITS4
		LCD_DATA_DDR |= 0xf0;
  b0:	9a b1       	in	r25, 0x0a	; 10
  b2:	90 6f       	ori	r25, 0xF0	; 240
  b4:	9a b9       	out	0x0a, r25	; 10
	#else
		LCD_DATA_DDR = 0xff;
	#endif
	#ifdef BITS4
		LCD_DATA_PORT &= data | 0x0f;
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	28 2f       	mov	r18, r24
  ba:	2f 60       	ori	r18, 0x0F	; 15
  bc:	92 23       	and	r25, r18
  be:	9b b9       	out	0x0b, r25	; 11
		LCD_DATA_PORT |= data & 0xf0;
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	89 2b       	or	r24, r25
  c6:	8b b9       	out	0x0b, r24	; 11
	#else
		LCD_DATA_PORT = data;
	#endif
	LCD_E_HIGH;
  c8:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdWrite+0x26>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcdWrite+0x2c>
	_delay_us(1);
	LCD_E_LOW;
  d2:	2f 98       	cbi	0x05, 7	; 5
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcdWrite+0x30>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcdWrite+0x36>
  dc:	08 95       	ret

000000de <lcdWriteCommand>:
	_delay_us(1);
}


void lcdWriteCommand(uint8_t command) {
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
	if (switchedTo4BitMode){
  e2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <switchedTo4BitMode>
  e6:	88 23       	and	r24, r24
  e8:	99 f0       	breq	.+38     	; 0x110 <lcdWriteCommand+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcdWriteCommand+0x10>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcdWriteCommand+0x16>
  f4:	00 00       	nop
		_delay_ms(1);
		lcdWrite(command, 0, 1);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWrite>
		lcdWrite(command << 4, 0, 0);
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	8c 2f       	mov	r24, r28
 106:	82 95       	swap	r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWrite>
 10e:	06 c0       	rjmp	.+12     	; 0x11c <lcdWriteCommand+0x3e>
	}else {
		lcdWrite(command, 0, checkBusyFlag);
 110:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWrite>
	}
}
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <lcdWriteData>:

void lcdWriteData(uint8_t data) {
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
	if (switchedTo4BitMode){
 124:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <switchedTo4BitMode>
 128:	88 23       	and	r24, r24
 12a:	99 f0       	breq	.+38     	; 0x152 <lcdWriteData+0x32>
 12c:	8f ec       	ldi	r24, 0xCF	; 207
 12e:	97 e0       	ldi	r25, 0x07	; 7
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcdWriteData+0x10>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcdWriteData+0x16>
 136:	00 00       	nop
		_delay_ms(1);
		lcdWrite(data, 1, 1);
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	8c 2f       	mov	r24, r28
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWrite>
		lcdWrite(data << 4, 1, 0);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	8c 2f       	mov	r24, r28
 148:	82 95       	swap	r24
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWrite>
 150:	06 c0       	rjmp	.+12     	; 0x15e <lcdWriteData+0x3e>
		}else {
		lcdWrite(data, 1, checkBusyFlag);
 152:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWrite>
	}
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcdInit>:

void lcdInit() {
	switchedTo4BitMode = 0;
 162:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <switchedTo4BitMode>
	checkBusyFlag = 0;
 166:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	LCD_E_DDR |= _BV(LCD_E_PIN);
 16a:	27 9a       	sbi	0x04, 7	; 4
	LCD_RS_DDR |= _BV(LCD_RS_PIN);
 16c:	26 9a       	sbi	0x04, 6	; 4
 16e:	8f e2       	ldi	r24, 0x2F	; 47
 170:	95 e7       	ldi	r25, 0x75	; 117
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcdInit+0x10>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcdInit+0x16>
 178:	00 00       	nop
	_delay_ms(15);
	lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT);
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 180:	87 e0       	ldi	r24, 0x07	; 7
 182:	90 e2       	ldi	r25, 0x20	; 32
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcdInit+0x22>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcdInit+0x28>
 18a:	00 00       	nop
	_delay_ms(4.1);
	lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT);
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 192:	8f ec       	ldi	r24, 0xCF	; 207
 194:	97 e0       	ldi	r25, 0x07	; 7
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcdInit+0x34>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcdInit+0x3a>
 19c:	00 00       	nop
	_delay_ms(1);
	lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT);
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 1a4:	8f ec       	ldi	r24, 0xCF	; 207
 1a6:	97 e0       	ldi	r25, 0x07	; 7
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcdInit+0x46>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcdInit+0x4c>
 1ae:	00 00       	nop
 1b0:	8f ec       	ldi	r24, 0xCF	; 207
 1b2:	97 e0       	ldi	r25, 0x07	; 7
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcdInit+0x52>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcdInit+0x58>
 1ba:	00 00       	nop
	_delay_ms(1);
	#ifdef BITS4
		_delay_ms(1);
		lcdWriteCommand(LCD_COMMAND_FUNCTION_SET);
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 1c2:	8f ec       	ldi	r24, 0xCF	; 207
 1c4:	97 e0       	ldi	r25, 0x07	; 7
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcdInit+0x64>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcdInit+0x6a>
 1cc:	00 00       	nop
		_delay_ms(1);
		switchedTo4BitMode = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <switchedTo4BitMode>
		checkBusyFlag = 1;
 1d4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_2LINES);
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 1de:	8f ec       	ldi	r24, 0xCF	; 207
 1e0:	97 e0       	ldi	r25, 0x07	; 7
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcdInit+0x80>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcdInit+0x86>
 1e8:	00 00       	nop
	#else
		checkBusyFlag = 1;
		lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT | LCD_PARAM_FUNCTION_SET_2LINES);
	#endif
	_delay_ms(1);
	lcdWriteCommand(LCD_COMMAND_ON_OFF);
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 1f0:	8f ec       	ldi	r24, 0xCF	; 207
 1f2:	97 e0       	ldi	r25, 0x07	; 7
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcdInit+0x92>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcdInit+0x98>
 1fa:	00 00       	nop
	_delay_ms(1);
	lcdWriteCommand(LCD_COMMAND_CLEAR);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 202:	87 e4       	ldi	r24, 0x47	; 71
 204:	96 e2       	ldi	r25, 0x26	; 38
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcdInit+0xa4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcdInit+0xaa>
 20c:	00 00       	nop
	_delay_ms(4.9);
	lcdWriteCommand(LCD_COMMAND_ENTRY_MODE_SET | LCD_PARAM_ENTRY_MODE_SET_INCREMENT);
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 214:	8f ec       	ldi	r24, 0xCF	; 207
 216:	97 e0       	ldi	r25, 0x07	; 7
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcdInit+0xb6>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcdInit+0xbc>
 21e:	00 00       	nop
	_delay_ms(1);
	lcdWriteCommand(LCD_COMMAND_ON_OFF | LCD_PARAM_ON_OFF_DISPLAY);
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 226:	8f ec       	ldi	r24, 0xCF	; 207
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcdInit+0xc8>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcdInit+0xce>
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <lcdString>:
	_delay_ms(1);
}

void lcdString(char str[]) {
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	fc 01       	movw	r30, r24
	uint8_t i = 0;
	while (str[i] != 0) {
 23c:	80 81       	ld	r24, Z
 23e:	88 23       	and	r24, r24
 240:	89 f0       	breq	.+34     	; 0x264 <lcdString+0x30>
 242:	8f 01       	movw	r16, r30
 244:	c0 e0       	ldi	r28, 0x00	; 0
		lcdWriteData(str[i++]);
 246:	cf 5f       	subi	r28, 0xFF	; 255
 248:	0e 94 90 00 	call	0x120	; 0x120 <lcdWriteData>
 24c:	8f ec       	ldi	r24, 0xCF	; 207
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcdString+0x1c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcdString+0x22>
 256:	00 00       	nop
	_delay_ms(1);
}

void lcdString(char str[]) {
	uint8_t i = 0;
	while (str[i] != 0) {
 258:	f8 01       	movw	r30, r16
 25a:	ec 0f       	add	r30, r28
 25c:	f1 1d       	adc	r31, r1
 25e:	80 81       	ld	r24, Z
 260:	81 11       	cpse	r24, r1
 262:	f1 cf       	rjmp	.-30     	; 0x246 <lcdString+0x12>
		lcdWriteData(str[i++]);
		_delay_ms(1);
	}
}
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <lcdGotoXY>:

void lcdGotoXY(uint8_t x, uint8_t y){
	lcdWriteCommand(LCD_COMMAND_SET_DDRAM_ADDRESS | (x + y * 0x40));
 26c:	90 e4       	ldi	r25, 0x40	; 64
 26e:	69 9f       	mul	r22, r25
 270:	80 0d       	add	r24, r0
 272:	11 24       	eor	r1, r1
 274:	80 68       	ori	r24, 0x80	; 128
 276:	0e 94 6f 00 	call	0xde	; 0xde <lcdWriteCommand>
 27a:	8f ec       	ldi	r24, 0xCF	; 207
 27c:	97 e0       	ldi	r25, 0x07	; 7
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcdGotoXY+0x12>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcdGotoXY+0x18>
 284:	00 00       	nop
 286:	08 95       	ret

00000288 <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
	DDRB |= _BV(PB1) | _BV(PB2);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	86 60       	ori	r24, 0x06	; 6
 28c:	84 b9       	out	0x04, r24	; 4
	PORTB |= _BV(PB1) | _BV(PB2);
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	86 60       	ori	r24, 0x06	; 6
 292:	85 b9       	out	0x05, r24	; 5
	lcdInit();
 294:	0e 94 b1 00 	call	0x162	; 0x162 <lcdInit>
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	89 e6       	ldi	r24, 0x69	; 105
 29c:	98 e1       	ldi	r25, 0x18	; 24
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x16>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x20>
 2a8:	00 00       	nop
	_delay_ms(1000);
    lcdWriteData('E');
 2aa:	85 e4       	ldi	r24, 0x45	; 69
 2ac:	0e 94 90 00 	call	0x120	; 0x120 <lcdWriteData>
	lcdWriteData('d');
 2b0:	84 e6       	ldi	r24, 0x64	; 100
 2b2:	0e 94 90 00 	call	0x120	; 0x120 <lcdWriteData>
	lcdWriteData('W');
 2b6:	87 e5       	ldi	r24, 0x57	; 87
 2b8:	0e 94 90 00 	call	0x120	; 0x120 <lcdWriteData>
	lcdWriteData(' ');
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	0e 94 90 00 	call	0x120	; 0x120 <lcdWriteData>
	lcdString("Elektronika");
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 1a 01 	call	0x234	; 0x234 <lcdString>
	lcdGotoXY(0, 1);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 36 01 	call	0x26c	; 0x26c <lcdGotoXY>
	lcdString("dla wszystkich");
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 1a 01 	call	0x234	; 0x234 <lcdString>
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	89 e6       	ldi	r24, 0x69	; 105
 2de:	98 e1       	ldi	r25, 0x18	; 24
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x58>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0x62>
 2ea:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(_BV(PB1) | _BV(PB2));
 2ec:	85 b1       	in	r24, 0x05	; 5
 2ee:	89 7f       	andi	r24, 0xF9	; 249
 2f0:	85 b9       	out	0x05, r24	; 5
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <main+0x6a>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
