
pwmtest0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0b  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000781  00000000  00000000  00000d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fb  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000436  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000581  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define maxpwm 9

int main(void)
{
	TCCR1A |= _BV(COM1A1) | _BV(COM1B1) | _BV(WGM11);
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 6a       	ori	r24, 0xA2	; 162
  88:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM13) | _BV(WGM12) | _BV(CS10);
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	89 61       	ori	r24, 0x19	; 25
  92:	80 83       	st	Z, r24
	ICR1 = maxpwm;
  94:	89 e0       	ldi	r24, 0x09	; 9
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  9c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	DDRB |= _BV(DDB1) | _BV(DDB2);
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	86 60       	ori	r24, 0x06	; 6
  a4:	84 b9       	out	0x04, r24	; 4
	OCR1A = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 1;
  b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	initUSART();
  ba:	0e 94 78 00 	call	0xf0	; 0xf0 <initUSART>
    {
		char ch = receiveByte();
		int8_t n = ch - '0';
		if((n >= 0) && (n < 10)){
			DDRB |= _BV(DDB1) | _BV(DDB2);
			OCR1A = n;
  be:	08 e8       	ldi	r16, 0x88	; 136
  c0:	10 e0       	ldi	r17, 0x00	; 0
			OCR1B = n;
  c2:	ca e8       	ldi	r28, 0x8A	; 138
  c4:	d0 e0       	ldi	r29, 0x00	; 0
	OCR1B = 1;
	initUSART();
    /* Replace with your application code */
    while (1) 
    {
		char ch = receiveByte();
  c6:	0e 94 89 00 	call	0x112	; 0x112 <receiveByte>
		int8_t n = ch - '0';
  ca:	80 53       	subi	r24, 0x30	; 48
		if((n >= 0) && (n < 10)){
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	60 f4       	brcc	.+24     	; 0xe8 <main+0x68>
			DDRB |= _BV(DDB1) | _BV(DDB2);
  d0:	94 b1       	in	r25, 0x04	; 4
  d2:	96 60       	ori	r25, 0x06	; 6
  d4:	94 b9       	out	0x04, r25	; 4
			OCR1A = n;
  d6:	08 2e       	mov	r0, r24
  d8:	00 0c       	add	r0, r0
  da:	99 0b       	sbc	r25, r25
  dc:	f8 01       	movw	r30, r16
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	80 83       	st	Z, r24
			OCR1B = n;
  e2:	99 83       	std	Y+1, r25	; 0x01
  e4:	88 83       	st	Y, r24
  e6:	ef cf       	rjmp	.-34     	; 0xc6 <main+0x46>
		}else{
			DDRB &= ~(_BV(DDB1) | _BV(DDB2));
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	89 7f       	andi	r24, 0xF9	; 249
  ec:	84 b9       	out	0x04, r24	; 4
  ee:	eb cf       	rjmp	.-42     	; 0xc6 <main+0x46>

000000f0 <initUSART>:


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = data;                                            /* send data */
  f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f4:	83 e3       	ldi	r24, 0x33	; 51
  f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	80 83       	st	Z, r24
 104:	88 e1       	ldi	r24, 0x18	; 24
 106:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 110:	08 95       	ret

00000112 <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 112:	e0 ec       	ldi	r30, 0xC0	; 192
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <receiveByte+0x4>
  return UDR0;                                /* return register value */
 11c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
